Les problemes:

	Cas d' un seul philosopheur
	
	Quand plusieurs philosophes s'apprêtent a mourrir au même momemt, les deux morts s'affichent
		./philo 150 30 2 1
	
	Les printf ne sont pas ordonnes, certaines phrases sont dites beaucoup plus tard que prevus
		./philo 150 30 2 1

	Les philos sont en conccurences, il faudrait les ordonner

----- RESOUDRE: Les philos sont en conccurences, il faudrait les ordonner -----
		Ce qu' il faut faire :

		S'il y a 2 philos [1; 2]:
			1 is eating
			2 is eating
			...
		S'il y a 3 philos [1; 2; 3] :
			1 is eating
			2 is eating
			3 is eating
			...
		S' il y a 4 philos [1; 2; 3; 4]:
			[1; 3] is eating
			[2; 4] is eating
			...
		S' il y a 5 philos [1; 2; 3; 4; 5]:
			[1; 3] is eating
			[2; 4] is eating
			[5; 3] is eating
			[1; 4] is eating
			[2; 5] is eating
			...
		S' il y a 6 philos [1; 2; 3; 4; 5; 6]:
			[1; 3; 5] is eating
			[2; 4; 6] is eating
			...

		>> Algorithme pour un nombre pair

			Tant que personne n'est mort
			{
				Tant que tous les philos pair n' ont pas manges:
					Si je suis pair:
						Je mange
				Tant que tous les philos impair n' ont pas manges:
					Si je suis impair:
						Je mange
			}

		>> Algorithme pour un nombre impair
		>> EX: 5 philos.

			Faire une liste chainnes de tous les philosophes du premier au dernier

			// Voici la routine()
			Tant que personne n'est mort:
			{
				Si je suis le premier element de la file d'attente alors:
				{
					Si je reussi a prendre les couverts:
					{
						Je me range a la fin de la liste, ainsi chaque philosophe avance de un dans la file d'attente
						Je mange
						Je rends les couverts
					}
					Sinon:
						Je change de position avec la personne derriere moi
				}
			}

OPTIMISATION de la chaine de depart:
	impair -> impair -> impair -> pair -> pair
	1 -> 3 -> 5 -> 2 -> 4 -> ...

Simulation sans l'optimisation

---------------------------------
|	Philos:	1	2	3	4	5	|
|								|
|	Repas:	0	0	0	0	0	|
---------------------------------

		>>> VAGUE 1 <<<

			File: [1 -> 2 -> 3 -> 4 -> 5] | Fourchettes: [1; 2; 3; 4; 5]
				1 prend les couverts 1 et 2 et se range au bout de la file d'attente;

			File: [2 -> 3 -> 4 -> 5 -> 1] | Fourchettes: [3; 4; 5]
				2 ne peut pas prendre le couvert 2 et laisse passer 3 devant lui;
				
			File: [3 -> 2 -> 4 -> 5 -> 1] | Fourchettes: [3; 4; 5]
				3 prends les couverts 3 et 4 et se range au bout de la file d'attente;

			***POINT DE RUPTURE***

			File: [2 -> 4 -> 5 -> 1 -> 3] | Fourchettes: [5]
				2 ne peut pas prendre le couvert 2 et laisse passer 4 devant lui;

			File: [4 -> 2 -> 5 -> 1 -> 3] | Fourchettes: [5]
				4 ne peut pas prendre le couvert 4 et laisse passer 2 devant lui;

			...

---------------------------------
|	Philos:	1	2	3	4	5	|
|								|
|	Repas:	1	0	1	0	0	|
---------------------------------

		==========================================================
			File: [2 -> 4 -> 5 -> 1 -> 3] | Fourchettes: [5]
				1 rends les couverts 1 et 2

			File: [2 -> 4 -> 5 -> 1 -> 3] | Fourchettes: [1; 2; 5]
				3 rends les couverts 3 et 4
		==========================================================

		>>> VAGUE 2 <<<
			File: [2 -> 4 -> 5 -> 1 -> 3] | Fourchettes: [1; 2; 3; 4; 5]
				2 prend les couverts 2 et 3 et se range au bout de la file d'attente;

			File: [4 -> 5 -> 1 -> 3 -> 2] | Fourchettes: [1; 4; 5]
				4 prend les couverts 4 et 5 et se range au bout de la file d'attente;

			***POINT DE RUPTURE***

			File: [5 -> 1 -> 3 -> 2 -> 4] | Fourchettes: [1]
				5 ne peut pas prendre le couvert 5 et laisse passer 1 devant lui;

			File: [1 -> 5 -> 3 -> 2 -> 4] | Fourchettes: [1]
				1 ne peut pas prendre le couvert 2 et laisse passer 5 devant lui;

			...

---------------------------------
|	Philos:	1	2	3	4	5	|
|								|
|	Repas:	1	1	1	1	0	|
---------------------------------

		==========================================================
			File: [5 -> 1 -> 3 -> 2 -> 4] | Fourchettes: [1]
				2 rends les couverts 2 et 3

			File: [5 -> 1 -> 3 -> 2 -> 4] | Fourchettes: [1; 2; 3]
				4 rends les couverts 4 et 5
		==========================================================

		>>> VAGUE 3 <<<
			File: [5 -> 1 -> 3 -> 2 -> 4] | Fourchettes: [1; 2; 3; 4; 5]
				5 prend les couverts 5 et 1 et se range au bout de la file d'attente;
			
			File: [1 -> 3 -> 2 -> 4 -> 5] | Fourchettes: [2; 3; 4]
				1 ne peut pas prendre le couvert 1 et laisse passer 3 devant lui;

			File: [3 -> 1 -> 2 -> 4 -> 5] | Fourchettes: [2; 3; 4]
				3 prend les couverts 3 et 4 et se range au bout de la file d'attente;

			***POINT DE RUPTURE***
			
			File: [1 -> 2 -> 4 -> 5 -> 3] | Fourchettes: [2]
				1 ne peut pas prendre le couvert 1 et laisse passer 2 devant lui;

			File: [2 -> 1 -> 4 -> 5 -> 3] | Fourchettes: [2]
				2 ne peut pas prendre le couvert 3 et laisse passer 1 devant lui;

			...

---------------------------------
|	Philos:	1	2	3	4	5	|
|								|
|	Repas:	1	1	2	1	1	|
---------------------------------

----- FIN DU PROBLEME: Les philos sont en conccurences, il faudrait les ordonner -----
